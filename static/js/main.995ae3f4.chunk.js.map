{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["url","urlImg","App","props","state","data","loaded","updateData","imgData","imgPos","handleClick","bind","fetch","then","res","json","setState","quotes","catch","err","console","error","loadedImg","image","characterDirection","randomNumb","Math","floor","random","this","length","newQuote","className","id","style","float","maxWidth","maxHeight","src","alt","quote","author","target","rel","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qPAGMA,G,MAAM,0IACNC,EAAS,+CAqFAC,E,kDAhFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,QAAQ,EACRC,WAAY,KACZC,QAAS,GACTC,OAAQ,IAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBATF,E,gEAYE,IAAD,OAClBC,MAAMZ,GACHa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZV,QAAQ,EACRD,KAAMU,EAAKE,YAEZC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,EAAM,SAAWnB,EAAMmB,MACvDP,MAAMX,GACHY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZM,WAAW,EACXd,QAASO,EAAK,GAAGQ,MACjBd,OAAQM,EAAK,GAAGS,wBAEjBN,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAM,4BAA8BpB,EAASkB,Q,oCAE1D,IAAD,OACNM,EAAaC,KAAKC,MAAMD,KAAKE,SAAWC,KAAKzB,MAAMC,KAAKyB,QACxDC,EAAWF,KAAKzB,MAAMC,KAAKoB,GACjCb,MAAMX,GACHY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZM,WAAW,EACXd,QAASO,EAAK,GAAGQ,MACjBhB,WAAYwB,EACZtB,OAAQM,EAAK,GAAGS,wBAEjBN,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAM,4BAA8BpB,EAASkB,Q,+BAG/D,IAAD,EACqBU,KAAKzB,MAA3BE,EADC,EACDA,OAAQgB,EADP,EACOA,UACd,OAAKhB,GAAWgB,EAOZ,yBAAKU,UAAU,MACb,yBAAKC,GAAG,aACiB,UAAtBJ,KAAKzB,MAAMK,OACV,yBACEyB,MAAO,CAAEC,MAAO,QAASC,SAAU,IAAKC,UAAW,KAAOC,IAAKT,KAAKzB,MAAMI,QAAS+B,IAAI,YAEzF,yBAAKL,MAAO,CAAEC,MAAO,OAAQC,SAAU,IAAKC,UAAW,KAAOC,IAAKT,KAAKzB,MAAMI,QAAS+B,IAAI,YAElE,OAA1BV,KAAKzB,MAAMG,WACV,uBAAG0B,GAAG,QAAQJ,KAAKzB,MAAMC,KAAK,GAAGmC,OACjC,uBAAGP,GAAG,QAAQJ,KAAKzB,MAAMG,WAAWiC,OAEX,OAA1BX,KAAKzB,MAAMG,WACV,uBAAG0B,GAAG,UAAN,IAAiBJ,KAAKzB,MAAMC,KAAK,GAAGoC,QACpC,uBAAGR,GAAG,UAAN,IAAiBJ,KAAKzB,MAAMG,WAAWkC,QAEzC,4BAAQT,UAAU,WAAU,uBAAGC,GAAG,cAAcS,OAAO,SAASC,IAAI,sBAAsBC,KAAK,oCAAmC,uBAAGZ,UAAU,qBAC/I,4BAAQC,GAAG,YAAYY,QAAShB,KAAKnB,aAArC,gBAtBJ,yBAAKuB,GAAG,WAAR,e,GAnDUa,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM0C,a","file":"static/js/main.995ae3f4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst url = 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\nconst urlImg = 'https://thesimpsonsquoteapi.glitch.me/quotes'\n\n// const fetchQuote = fetch()\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: [],\n      loaded: false,\n      updateData: null,\n      imgData: [],\n      imgPos: [],\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  componentDidMount() {\n    fetch(url)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          loaded: true,\n          data: json.quotes\n        })\n      }).catch(err => console.error(err + ' from ' + url + err));\n    fetch(urlImg)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          loadedImg: true,\n          imgData: json[0].image,\n          imgPos: json[0].characterDirection\n        })\n      }).catch(err => console.error('Failed to load image from' + urlImg + err))\n  }\n  handleClick() {\n    const randomNumb = Math.floor(Math.random() * this.state.data.length)\n    const newQuote = this.state.data[randomNumb]\n    fetch(urlImg)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          loadedImg: true,\n          imgData: json[0].image,\n          updateData: newQuote,\n          imgPos: json[0].characterDirection\n        })\n      }).catch(err => console.error('Failed to load image from' + urlImg + err))\n  }\n\n  render() {\n    var { loaded, loadedImg } = this.state\n    if (!loaded && !loadedImg) {\n      return (\n        <div id=\"loading\">Loading</div>\n      )\n    }\n    else {\n      return (\n        <div className=\"bg\" >\n          <div id=\"quote-box\">\n            {this.state.imgPos === 'Right' ?\n              <img\n                style={{ float: 'right', maxWidth: 200, maxHeight: 200 }} src={this.state.imgData} alt=\"Simpson\"\n              /> :\n              <img style={{ float: 'left', maxWidth: 200, maxHeight: 200 }} src={this.state.imgData} alt=\"Simpson\" />\n            }\n            {this.state.updateData === null ?\n              <p id=\"text\">{this.state.data[0].quote}</p> :\n              <p id=\"text\">{this.state.updateData.quote}</p>\n            }\n            {this.state.updateData === null ?\n              <p id=\"author\">-{this.state.data[0].author}</p> :\n              <p id=\"author\">-{this.state.updateData.author}</p>\n            }\n            <button className=\"twitter\"><a id=\"tweet-quote\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/intent/tweet\"><i className=\"fab fa-twitter\"></i></a></button>\n            <button id=\"new-quote\" onClick={this.handleClick}>FeedMeMore</button>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}