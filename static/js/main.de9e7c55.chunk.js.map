{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["url","App","props","state","data","loaded","handleClick","bind","fetch","then","res","json","setState","bgPosition","console","log","catch","err","clear","error","this","className","id","characterDirection","style","float","maxWidth","maxHeight","src","image","quote","character","target","href","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2NAGMA,G,MAAM,gDA+DGC,E,kDAzDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,QAAQ,GAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANH,E,gEASE,IAAD,OAChBC,MAAMR,GACLS,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZP,QAAS,EACTD,KAAMO,EACNE,WAAY,OAEdC,QAAQC,IAAIJ,MACXK,OAAM,SAAAC,GAAG,OAAGH,QAAQC,IAAI,2BAA2Bf,EAAIiB,Q,oCAE/C,IAAD,OACXT,MAAMR,GACJS,MAAK,SAAAC,GAAG,OAAGA,EAAIC,UACfF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CACZP,QAAS,EACTD,KAAMO,IAERG,QAAQI,QACRJ,QAAQC,IAAIJ,MACXK,OAAM,SAAAC,GAAG,OAAGH,QAAQK,MAAMF,EAAI,SAASjB,Q,+BAGpC,IAAD,EACeoB,KAAKjB,MAArBE,EADC,EACDA,OAAQD,EADP,EACOA,KACb,OAAIC,EAOA,yBAAKgB,UAAU,MACb,yBAAKC,GAAG,aAC0B,SAA7BlB,EAAK,GAAGmB,mBAA4B,yBAAKC,MAAO,CAACC,MAAM,OAAOC,SAAU,IAAKC,UAAW,KAAMC,IAAKxB,EAAK,GAAGyB,QAAS,yBAAKL,MAAO,CAACC,MAAM,QAAQC,SAAU,IAAKC,UAAW,KAAMC,IAAKxB,EAAK,GAAGyB,QAC7L,uBAAGP,GAAG,QAAQlB,EAAK,GAAG0B,OACtB,uBAAGR,GAAG,UAAN,IAAiBlB,EAAK,GAAG2B,WACzB,4BAAQV,UAAU,WAAU,uBAAGC,GAAG,cAAcU,OAAO,SAASC,KAAK,oCAAmC,uBAAGZ,UAAU,qBACrH,4BAAQC,GAAG,YAAYY,QAASd,KAAKd,aAArC,gBAXN,yBAAKgB,GAAG,WAAR,e,GAvCUa,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdnC,OAAM,SAAAG,GACLL,QAAQK,MAAMA,EAAMiC,a","file":"static/js/main.de9e7c55.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst url = 'https://thesimpsonsquoteapi.glitch.me/quotes'\n\n\n// const fetchQuote = fetch()\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      data: [],\n      loaded: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }  \n\n  componentDidMount(){\n     fetch(url)\n     .then(res=> res.json())\n     .then(json =>{\n       this.setState({\n         loaded : true,\n         data: json,\n         bgPosition: \"0%\"\n       })\n       console.log(json)\n     }).catch(err=> console.log('Failed to load data from'+url+err))\n  }\n  handleClick(){\n    fetch(url)\n     .then(res=> res.json())\n     .then(json =>{\n       this.setState({\n         loaded : true,\n         data: json\n       })\n       console.clear()\n       console.log(json)\n     }).catch(err=> console.error(err+' from '+url))\n  }\n\n  render(){\n    var {loaded, data} = this.state\n    if(!loaded){\n      return (\n        <div id=\"loading\">Loading</div>\n      )\n    }\n    else{\n      return (\n        <div className=\"bg\" >\n          <div id=\"quote-box\">\n              {data[0].characterDirection===\"Left\"?<img style={{float:\"left\",maxWidth: 200, maxHeight: 200}} src={data[0].image}/>:<img style={{float:\"right\",maxWidth: 200, maxHeight: 200}} src={data[0].image}/>}\n              <p id=\"text\">{data[0].quote}</p>\n              <p id=\"author\">-{data[0].character}</p>\n              <button className=\"twitter\"><a id=\"tweet-quote\" target=\"_blank\" href=\"https://twitter.com/intent/tweet\"><i className=\"fab fa-twitter\"></i></a></button>\n              <button id=\"new-quote\" onClick={this.handleClick}>FeedMeMore</button>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}